# 7_PQC_Proxy_Deployment/nginx.conf
# Nginx configuration for Hybrid PQC TLS termination

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Custom log format to capture cryptographic details
    log_format crypto_details '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" KEM=$ssl_curves CIPHER=$ssl_cipher PROTOCOL=$ssl_protocol';

    access_log /var/log/nginx/access.log crypto_details;
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;
        location /healthz {
            return 200 'OK';
        }
    }

    server {
        listen 443 ssl http2;
        
        # Certificates: Must use PQC or Hybrid certificates for full PQC handshakes (signatures).
        # For testing KEMs only, classical certs (RSA/ECC) are sufficient.
        # TODO: Mount certificates into the container
        # ssl_certificate /etc/nginx/certs/server.crt;
        # ssl_certificate_key /etc/nginx/certs/server.key;

        # TLS 1.3 is required for PQC KEMs as currently standardized
        ssl_protocols TLSv1.3;

        # Critical: Define KEM groups. Prioritize IETF Hybrid, then PQC, then Classical.
        # The names must match those supported by the OQS provider version used.
        # Example OQS names (verify with `openssl list -kem-algorithms -provider oqsprovider`):
        # Hybrid (X25519+MLKEM768, P256+MLKEM768), PQC (MLKEM768), Classical (X25519, P256)
        ssl_groups x25519_mlkem768:p256_mlkem768:mlkem768:x25519:p256;

        location / {
            # Proxy to backend service
            # proxy_pass http://backend_service;
            
            # For testing, just return status and negotiated parameters
            # In Nginx, $ssl_curves (or $ssl_groups in newer versions) holds the negotiated group
            add_header X-Carnot-TLS-Negotiated-KEM $ssl_curves always;
            add_header X-Carnot-TLS-Cipher $ssl_cipher always;
            return 200 "CarnotEngine PQC Proxy Active";
        }
    }
}